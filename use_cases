Case 1:  You are making online tutorials to teach software concepts, and would like a way for you students to get the same experience as they would sitting down with a teacher.  Open the file "example1.py" and annotate it with explanatory comments for your students, generate a trace file from your annotations. 

Explanation: This is the usage pattern which accompanies transitioning a group of examples or tutorials to this system. This is the most important early case to nail. By making it very easy to use this system, it will be easier to gain acceptance among teachers.  If teachers won't use this, it doesn't really matter how useful it might be.

Case 2:  You are a student who is learning to program from online tutorials and have downloaded the file "example2.jtr" as a supplement to one of the tutorials.  Using this program, open the file and as it executes, describe what the program is doing. 

Explanation: This is the most comCase 1:mon usage among students using a tutorial.  Each group of lessons created using this tool, is made by one or possibly a handful of people. However, there is no cap on the number of people who could use those lessons, so the vast majority of users will only interact with this aspect of the program. It must have no major obstacles, or it will drive people away from lessons.

Case 3:  You have a previously existing program file which has been annotated for use in teaching and you wish to change it to correct an error. Edit the program and its annotations to correct your error. Then, generate a new trace file which you can distribute to your students. Run the trace to verify its correctness. 

Explanation: This is the edit/eval loop of this process and it must be easy or example files will stagnate, not being kept up to date or accurate. If it is not easy to progressively tweak existing files, they will be abandoned or not created in the first place. 

Case 4:  You are a teacher who has received a trace file from one of your colleagues.  When you run it, you notice a spelling error in an annotation.  Open the trace in your favorite text editor and correct the error in the trace.

Explanation: This is the least common usage, and could be omitted if the testing needed to be cut.  However, it is important to verify that they intermediate data file is understandable and easily parsible by humans using common tools. So that small tweaks could be possible and the trace file could be processed by anyone.  The JSON usage will help this. 
