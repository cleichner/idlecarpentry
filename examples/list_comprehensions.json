{
  "source": "# A brief demonstration of list comprehensions:\nlist = ['a', 'mpilgrim', 'foo', 'b', 'b', 'd']\n\nlong_words = []\nfor element in list:\n    if len(element) > 1:\n        long_words.append(element)\n\nprint long_words\nprint [element for element in list if len(element) > 1]\n\ndel long_words\n\nupper_list = []\nfor element in list:\n    if element != 'b':\n        upper_list.append(element.upper())\n\nprint upper_list\nprint [element.upper() for element in list if element != 'b']\n", 
  "trace": [
    {
      "line": 1, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'"
      }, 
      "annotation": "This is the basic list which will be used for processing in this example.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'"
      }
    }, 
    {
      "line": 3, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']"
      }, 
      "annotation": "This is a typical example of imperative list processing.\nFirst, a new empty list is declared.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']"
      }
    }, 
    {
      "line": 4, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "[]"
      }, 
      "annotation": "Then, we iterate over the list.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "[]"
      }
    }, 
    {
      "line": 5, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "[]", 
        "element": "'a'"
      }, 
      "annotation": "If the element satisfies the condition, add it to the new list", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "[]", 
        "element": "'a'"
      }
    }, 
    {
      "line": 4, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "[]", 
        "element": "'a'"
      }, 
      "annotation": "Then, we iterate over the list.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "[]", 
        "element": "'a'"
      }
    }, 
    {
      "line": 5, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "[]", 
        "element": "'mpilgrim'"
      }, 
      "annotation": "If the element satisfies the condition, add it to the new list", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "[]", 
        "element": "'mpilgrim'"
      }
    }, 
    {
      "line": 6, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "[]", 
        "element": "'mpilgrim'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "[]", 
        "element": "'mpilgrim'"
      }
    }, 
    {
      "line": 4, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim']", 
        "element": "'mpilgrim'"
      }, 
      "annotation": "Then, we iterate over the list.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim']", 
        "element": "'mpilgrim'"
      }
    }, 
    {
      "line": 5, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim']", 
        "element": "'foo'"
      }, 
      "annotation": "If the element satisfies the condition, add it to the new list", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim']", 
        "element": "'foo'"
      }
    }, 
    {
      "line": 6, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim']", 
        "element": "'foo'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim']", 
        "element": "'foo'"
      }
    }, 
    {
      "line": 4, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'foo'"
      }, 
      "annotation": "Then, we iterate over the list.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'foo'"
      }
    }, 
    {
      "line": 5, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'b'"
      }, 
      "annotation": "If the element satisfies the condition, add it to the new list", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'b'"
      }
    }, 
    {
      "line": 4, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'b'"
      }, 
      "annotation": "Then, we iterate over the list.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'b'"
      }
    }, 
    {
      "line": 5, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'b'"
      }, 
      "annotation": "If the element satisfies the condition, add it to the new list", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'b'"
      }
    }, 
    {
      "line": 4, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'b'"
      }, 
      "annotation": "Then, we iterate over the list.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'b'"
      }
    }, 
    {
      "line": 5, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'d'"
      }, 
      "annotation": "If the element satisfies the condition, add it to the new list", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'d'"
      }
    }, 
    {
      "line": 4, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'d'"
      }, 
      "annotation": "Then, we iterate over the list.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'d'"
      }
    }, 
    {
      "line": 8, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'d'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'d'"
      }, 
      "stdout": "['mpilgrim', 'foo']\n"
    }, 
    {
      "line": 9, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'d'"
      }, 
      "annotation": "This is the functional approach, which is more like set-builder notation in math.\nThis generates a new list, the syntax mimics the list declaration.\nIt has a output function, a working variable, a source, and a conditional statement.\nIn this case, the output function is element, the working variable is element, the source is list and the conditional is len(element) > 1.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'d'"
      }
    }, 
    {
      "line": 9, 
      "globals": {
        "_[1]": "[]", 
        "long_words": "['mpilgrim', 'foo']", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'a'"
      }, 
      "annotation": "This is the functional approach, which is more like set-builder notation in math.\nThis generates a new list, the syntax mimics the list declaration.\nIt has a output function, a working variable, a source, and a conditional statement.\nIn this case, the output function is element, the working variable is element, the source is list and the conditional is len(element) > 1.", 
      "locals": {
        "_[1]": "[]", 
        "long_words": "['mpilgrim', 'foo']", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'a'"
      }
    }, 
    {
      "line": 9, 
      "globals": {
        "_[1]": "['mpilgrim']", 
        "long_words": "['mpilgrim', 'foo']", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'mpilgrim'"
      }, 
      "annotation": "This is the functional approach, which is more like set-builder notation in math.\nThis generates a new list, the syntax mimics the list declaration.\nIt has a output function, a working variable, a source, and a conditional statement.\nIn this case, the output function is element, the working variable is element, the source is list and the conditional is len(element) > 1.", 
      "locals": {
        "_[1]": "['mpilgrim']", 
        "long_words": "['mpilgrim', 'foo']", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'mpilgrim'"
      }
    }, 
    {
      "line": 9, 
      "globals": {
        "_[1]": "['mpilgrim', 'foo']", 
        "long_words": "['mpilgrim', 'foo']", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'foo'"
      }, 
      "annotation": "This is the functional approach, which is more like set-builder notation in math.\nThis generates a new list, the syntax mimics the list declaration.\nIt has a output function, a working variable, a source, and a conditional statement.\nIn this case, the output function is element, the working variable is element, the source is list and the conditional is len(element) > 1.", 
      "locals": {
        "_[1]": "['mpilgrim', 'foo']", 
        "long_words": "['mpilgrim', 'foo']", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'foo'"
      }
    }, 
    {
      "line": 9, 
      "globals": {
        "_[1]": "['mpilgrim', 'foo']", 
        "long_words": "['mpilgrim', 'foo']", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'b'"
      }, 
      "annotation": "This is the functional approach, which is more like set-builder notation in math.\nThis generates a new list, the syntax mimics the list declaration.\nIt has a output function, a working variable, a source, and a conditional statement.\nIn this case, the output function is element, the working variable is element, the source is list and the conditional is len(element) > 1.", 
      "locals": {
        "_[1]": "['mpilgrim', 'foo']", 
        "long_words": "['mpilgrim', 'foo']", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'b'"
      }
    }, 
    {
      "line": 9, 
      "globals": {
        "_[1]": "['mpilgrim', 'foo']", 
        "long_words": "['mpilgrim', 'foo']", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'d'"
      }, 
      "annotation": "This is the functional approach, which is more like set-builder notation in math.\nThis generates a new list, the syntax mimics the list declaration.\nIt has a output function, a working variable, a source, and a conditional statement.\nIn this case, the output function is element, the working variable is element, the source is list and the conditional is len(element) > 1.", 
      "locals": {
        "_[1]": "['mpilgrim', 'foo']", 
        "long_words": "['mpilgrim', 'foo']", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'d'"
      }, 
      "stdout": "['mpilgrim', 'foo']\n"
    }, 
    {
      "line": 11, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'d'"
      }, 
      "annotation": "This remove long_words from the global variable dictionary.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "long_words": "['mpilgrim', 'foo']", 
        "element": "'d'"
      }
    }, 
    {
      "line": 13, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'d'"
      }, 
      "annotation": "This is the same thing as before, but slightly more complicated.\nIt generates a list of the upper case version of all the members of list which aren't b.", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "element": "'d'"
      }
    }, 
    {
      "line": 14, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "[]", 
        "element": "'d'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "[]", 
        "element": "'d'"
      }
    }, 
    {
      "line": 15, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "[]", 
        "element": "'a'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "[]", 
        "element": "'a'"
      }
    }, 
    {
      "line": 16, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "[]", 
        "element": "'a'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "[]", 
        "element": "'a'"
      }
    }, 
    {
      "line": 14, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A']", 
        "element": "'a'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A']", 
        "element": "'a'"
      }
    }, 
    {
      "line": 15, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A']", 
        "element": "'mpilgrim'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A']", 
        "element": "'mpilgrim'"
      }
    }, 
    {
      "line": 16, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A']", 
        "element": "'mpilgrim'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A']", 
        "element": "'mpilgrim'"
      }
    }, 
    {
      "line": 14, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM']", 
        "element": "'mpilgrim'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM']", 
        "element": "'mpilgrim'"
      }
    }, 
    {
      "line": 15, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM']", 
        "element": "'foo'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM']", 
        "element": "'foo'"
      }
    }, 
    {
      "line": 16, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM']", 
        "element": "'foo'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM']", 
        "element": "'foo'"
      }
    }, 
    {
      "line": 14, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'foo'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'foo'"
      }
    }, 
    {
      "line": 15, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'b'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'b'"
      }
    }, 
    {
      "line": 14, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'b'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'b'"
      }
    }, 
    {
      "line": 15, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'b'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'b'"
      }
    }, 
    {
      "line": 14, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'b'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'b'"
      }
    }, 
    {
      "line": 15, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'d'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'d'"
      }
    }, 
    {
      "line": 16, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'d'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO']", 
        "element": "'d'"
      }
    }, 
    {
      "line": 14, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'d'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'d'"
      }
    }, 
    {
      "line": 18, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'d'"
      }, 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'d'"
      }, 
      "stdout": "['A', 'MPILGRIM', 'FOO', 'D']\n"
    }, 
    {
      "line": 19, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'d'"
      }, 
      "annotation": "This demonstrates the ability to use an arbitrary value as the return function.\nIn this case it is element.upper()", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'d'"
      }
    }, 
    {
      "line": 19, 
      "globals": {
        "__name__": "'__main__'", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "_[2]": "['A']", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'a'"
      }, 
      "annotation": "This demonstrates the ability to use an arbitrary value as the return function.\nIn this case it is element.upper()", 
      "locals": {
        "__name__": "'__main__'", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "_[2]": "['A']", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'a'"
      }
    }, 
    {
      "line": 19, 
      "globals": {
        "__name__": "'__main__'", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "_[2]": "['A', 'MPILGRIM']", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'mpilgrim'"
      }, 
      "annotation": "This demonstrates the ability to use an arbitrary value as the return function.\nIn this case it is element.upper()", 
      "locals": {
        "__name__": "'__main__'", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "_[2]": "['A', 'MPILGRIM']", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'mpilgrim'"
      }
    }, 
    {
      "line": 19, 
      "globals": {
        "__name__": "'__main__'", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "_[2]": "['A', 'MPILGRIM', 'FOO']", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'foo'"
      }, 
      "annotation": "This demonstrates the ability to use an arbitrary value as the return function.\nIn this case it is element.upper()", 
      "locals": {
        "__name__": "'__main__'", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "_[2]": "['A', 'MPILGRIM', 'FOO']", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'foo'"
      }
    }, 
    {
      "line": 19, 
      "globals": {
        "__name__": "'__main__'", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "_[2]": "['A', 'MPILGRIM', 'FOO']", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'b'"
      }, 
      "annotation": "This demonstrates the ability to use an arbitrary value as the return function.\nIn this case it is element.upper()", 
      "locals": {
        "__name__": "'__main__'", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "_[2]": "['A', 'MPILGRIM', 'FOO']", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'b'"
      }
    }, 
    {
      "line": 19, 
      "globals": {
        "__name__": "'__main__'", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "_[2]": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'d'"
      }, 
      "annotation": "This demonstrates the ability to use an arbitrary value as the return function.\nIn this case it is element.upper()", 
      "locals": {
        "__name__": "'__main__'", 
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "_[2]": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'d'"
      }, 
      "stdout": "['A', 'MPILGRIM', 'FOO', 'D']\n"
    }, 
    {
      "line": 19, 
      "globals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'d'"
      }, 
      "annotation": "This demonstrates the ability to use an arbitrary value as the return function.\nIn this case it is element.upper()", 
      "locals": {
        "__builtins__": "<module '__builtin__' (built-in)>", 
        "__name__": "'__main__'", 
        "list": "['a', 'mpilgrim', 'foo', 'b', 'b', 'd']", 
        "upper_list": "['A', 'MPILGRIM', 'FOO', 'D']", 
        "element": "'d'"
      }
    }
  ]
}
